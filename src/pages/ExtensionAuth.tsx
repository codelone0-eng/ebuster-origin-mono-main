/**
 * Extension OAuth Authorization Page
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ OAuth
 */

import { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuth } from '@/contexts/CustomAuthContext';
import { Loader2, Shield, CheckCircle, XCircle } from 'lucide-react';

export default function ExtensionAuth() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { user, loading } = useAuth();
  const [authorizing, setAuthorizing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OAuth
  const clientId = searchParams.get('client_id');
  const redirectUri = searchParams.get('redirect_uri');
  const state = searchParams.get('state');
  const responseType = searchParams.get('response_type');

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!clientId || !redirectUri || !responseType) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OAuth');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if (clientId !== 'ebuster-extension') {
      setError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ª–æ–≥–∏–Ω
    if (!loading && !user) {
      sessionStorage.setItem('oauth_params', JSON.stringify({
        client_id: clientId,
        redirect_uri: redirectUri,
        state: state || '',
        response_type: responseType
      }));
      navigate('/login');
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if (user && !authorizing) {
      handleAuthorize();
    }
  }, [user, loading, clientId, redirectUri, state, responseType]);

  const handleAuthorize = async () => {
    setAuthorizing(true);
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º authorization code
      const authCode = 'auth_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–º–µ–Ω–∞
      const API_URL = import.meta.env.VITE_API_URL || 'https://api.ebuster.ru';
      const saveResponse = await fetch(`${API_URL}/api/auth/extension/save-code`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code: authCode,
          userId: user!.id,
          email: user!.email
        })
      });

      if (!saveResponse.ok) {
        throw new Error('Failed to save authorization code');
      }

      console.log('üîê [ExtensionAuth] Authorization code saved:', authCode);

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      const redirectUrl = new URL(redirectUri!);
      redirectUrl.searchParams.set('code', authCode);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ state —á—Ç–æ –ø—Ä–∏—à–µ–ª –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      redirectUrl.searchParams.set('state', state || '');

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      setTimeout(() => {
        window.location.href = redirectUrl.toString();
      }, 1000);
    } catch (err) {
      console.error('Authorization error:', err);
      setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      setAuthorizing(false);
    }
  };

  const handleDeny = () => {
    if (redirectUri) {
      const redirectUrl = new URL(redirectUri);
      redirectUrl.searchParams.set('error', 'access_denied');
      if (state) {
        redirectUrl.searchParams.set('state', state);
      }
      window.location.href = redirectUrl.toString();
    } else {
      navigate('/');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <Loader2 className="w-8 h-8 animate-spin text-primary" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <div className="flex items-center justify-center mb-4">
              <div className="w-16 h-16 rounded-full bg-destructive/10 flex items-center justify-center">
                <XCircle className="w-8 h-8 text-destructive" />
              </div>
            </div>
            <CardTitle className="text-center">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</CardTitle>
            <CardDescription className="text-center">{error}</CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={() => navigate('/')} className="w-full">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (authorizing) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <div className="flex items-center justify-center mb-4">
              <div className="w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center">
                <CheckCircle className="w-8 h-8 text-primary animate-pulse" />
              </div>
            </div>
            <CardTitle className="text-center">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</CardTitle>
            <CardDescription className="text-center">
              –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ...
            </CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <div className="flex items-center justify-center mb-4">
            <div className="w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center">
              <Shield className="w-8 h-8 text-primary" />
            </div>
          </div>
          <CardTitle className="text-center">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</CardTitle>
          <CardDescription className="text-center">
            –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ EBUSTER –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-muted p-4 rounded-lg space-y-2">
            <p className="text-sm font-medium">–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫:</p>
            <ul className="text-sm text-muted-foreground space-y-1">
              <li>‚Ä¢ –í–∞—à–µ–º—É email –∏ –∏–º–µ–Ω–∏</li>
              <li>‚Ä¢ –°–ø–∏—Å–∫—É –≤–∞—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤</li>
              <li>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è</li>
            </ul>
          </div>

          {user && (
            <div className="bg-muted p-4 rounded-lg">
              <p className="text-sm font-medium mb-2">–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫:</p>
              <p className="text-sm text-muted-foreground">{user.email}</p>
              {user.full_name && (
                <p className="text-sm text-muted-foreground">{user.full_name}</p>
              )}
            </div>
          )}

          <div className="flex gap-3">
            <Button onClick={handleDeny} variant="outline" className="flex-1">
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
            <Button onClick={handleAuthorize} className="flex-1">
              –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
