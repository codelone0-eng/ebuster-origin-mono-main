import cron from 'node-cron';
import fetch from 'node-fetch';

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
export const startAutoUnbanCron = () => {
  // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  cron.schedule('*/5 * * * *', async () => {
    try {
      console.log('üîÑ [CRON] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const response = await fetch(`${API_BASE_URL}/api/admin/auto-unban`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();
      
      if (data.success) {
        console.log(`‚úÖ [CRON] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${data.data.unbannedCount}`);
      } else {
        console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', data.error);
      }
    } catch (error) {
      console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron job:', error);
    }
  });

  console.log('‚úÖ [CRON] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
export const startBanCleanupCron = () => {
  // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
  cron.schedule('0 0 * * *', async () => {
    try {
      console.log('üßπ [CRON] –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤...');
      
      const response = await fetch(`${API_BASE_URL}/api/admin/auto-unban`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();
      
      if (data.success) {
        console.log(`‚úÖ [CRON] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${data.data.unbannedCount}`);
      } else {
        console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', data.error);
      }
    } catch (error) {
      console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron job:', error);
    }
  });

  console.log('‚úÖ [CRON] –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)');
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ cron jobs
export const startAllCronJobs = () => {
  startAutoUnbanCron();
  startBanCleanupCron();
  console.log('‚úÖ [CRON] –í—Å–µ cron jobs –∑–∞–ø—É—â–µ–Ω—ã');
};
