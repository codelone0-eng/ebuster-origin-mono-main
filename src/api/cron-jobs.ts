import cron from 'node-cron';
import { createClient } from '@supabase/supabase-js';

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ HTTP)
const autoUnbanUsers = async () => {
  try {
    const SUPABASE_URL = process.env.SUPABASE_URL;
    const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;

    if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
      console.error('‚ùå [CRON] Supabase credentials not configured');
      return { success: false, unbannedCount: 0 };
    }

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
      auth: { persistSession: false }
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–Ω—ã —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
    const { data: expiredBans, error: fetchError } = await supabase
      .from('user_bans')
      .select('user_id, ban_id')
      .eq('is_active', true)
      .eq('ban_type', 'temporary')
      .lte('unban_date', new Date().toISOString());

    if (fetchError) {
      console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–æ–≤:', fetchError);
      return { success: false, unbannedCount: 0 };
    }

    if (!expiredBans || expiredBans.length === 0) {
      return { success: true, unbannedCount: 0 };
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–∞–Ω—ã
    const { error: updateBansError } = await supabase
      .from('user_bans')
      .update({ is_active: false, updated_at: new Date().toISOString() })
      .in('ban_id', expiredBans.map(b => b.ban_id));

    if (updateBansError) {
      console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–∞–Ω–æ–≤:', updateBansError);
      return { success: false, unbannedCount: 0 };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userIds = expiredBans.map(b => b.user_id);
    const { error: updateUsersError } = await supabase
      .from('auth_users')
      .update({ status: 'active', updated_at: new Date().toISOString() })
      .in('id', userIds);

    if (updateUsersError) {
      console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', updateUsersError);
      return { success: false, unbannedCount: 0 };
    }

    return { success: true, unbannedCount: expiredBans.length };
  } catch (error) {
    console.error('‚ùå [CRON] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return { success: false, unbannedCount: 0 };
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
export const startAutoUnbanCron = () => {
  // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  cron.schedule('*/5 * * * *', async () => {
    try {
      console.log('üîÑ [CRON] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const result = await autoUnbanUsers();
      
      if (result.success) {
        console.log(`‚úÖ [CRON] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${result.unbannedCount}`);
      } else {
        console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron job:', error);
    }
  });

  console.log('‚úÖ [CRON] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
export const startBanCleanupCron = () => {
  // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
  cron.schedule('0 0 * * *', async () => {
    try {
      console.log('üßπ [CRON] –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤...');
      
      const result = await autoUnbanUsers();
      
      if (result.success) {
        console.log(`‚úÖ [CRON] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.unbannedCount}`);
      } else {
        console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron job:', error);
    }
  });

  console.log('‚úÖ [CRON] –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)');
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ cron jobs
export const startAllCronJobs = () => {
  startAutoUnbanCron();
  startBanCleanupCron();
  console.log('‚úÖ [CRON] –í—Å–µ cron jobs –∑–∞–ø—É—â–µ–Ω—ã');
};
