import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { createClient } from '@supabase/supabase-js';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Request –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è user
declare global {
  namespace Express {
    interface Request {
      user?: {
        id: string;
        email: string;
        full_name?: string;
      };
    }
  }
}

const JWT_SECRET = process.env.JWT_SECRET || 'ebuster_2024_super_secure_jwt_key_7f8a9b2c4d6e1f3a5b7c9d2e4f6a8b1c3d5e7f9a2b4c6d8e1f3a5b7c9d2e4f6a8b';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const getSupabaseAdmin = () => {
  const SUPABASE_URL = process.env.SUPABASE_URL;
  const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
  
  if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
    return null;
  }
  
  return createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, { auth: { persistSession: false } });
};

// Middleware –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
export const authenticateUser = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({
        error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
    let decoded;
    try {
      decoded = jwt.verify(token, JWT_SECRET) as { userId: string; email: string };
    } catch (jwtError) {
      return res.status(401).json({
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

    // –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = getSupabaseAdmin();

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user;
    if (supabase) {
      // –ü–æ–∏—Å–∫ –≤ Supabase
      const { data, error: userError } = await supabase
        .from('auth_users')
        .select('id, email, full_name, email_confirmed')
        .eq('id', decoded.userId)
        .single();

      if (userError || !data) {
        return res.status(401).json({
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
      user = data;
    } else {
      return res.status(500).json({
        error: 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
    if (!user.email_confirmed) {
      return res.status(401).json({
        error: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ req
    req.user = {
      id: user.id,
      email: user.email,
      full_name: user.full_name
    };

    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// Middleware –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
export const optionalAuthenticateUser = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      console.log('üîç [optionalAuthenticateUser] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      req.user = undefined;
      return next();
    }

    console.log('üîç [optionalAuthenticateUser] –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', token.substring(0, 20) + '...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
    let decoded;
    try {
      decoded = jwt.verify(token, JWT_SECRET) as { userId: string; email: string };
      console.log('üîç [optionalAuthenticateUser] JWT –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', { userId: decoded.userId, email: decoded.email });
    } catch (jwtError) {
      console.log('üîç [optionalAuthenticateUser] JWT –æ—à–∏–±–∫–∞:', jwtError);
      req.user = undefined;
      return next();
    }

    // –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = getSupabaseAdmin();

    if (supabase) {
      console.log('üîç [optionalAuthenticateUser] –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ auth_users:', decoded.userId);
      // –ü–æ–∏—Å–∫ –≤ Supabase
      const { data, error: userError } = await supabase
        .from('auth_users')
        .select('id, email, full_name, email_confirmed')
        .eq('id', decoded.userId)
        .single();

      console.log('üîç [optionalAuthenticateUser] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', { data, userError });

      if (!userError && data && data.email_confirmed) {
        console.log('üîç [optionalAuthenticateUser] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', data.email);
        req.user = {
          id: data.id,
          email: data.email,
          full_name: data.full_name
        };
      } else {
        console.log('üîç [optionalAuthenticateUser] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
        req.user = undefined;
      }
    } else {
      console.log('üîç [optionalAuthenticateUser] Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      req.user = undefined;
    }

    next();
  } catch (error) {
    console.error('üîç [optionalAuthenticateUser] –û—à–∏–±–∫–∞:', error);
    req.user = undefined;
    next();
  }
};
