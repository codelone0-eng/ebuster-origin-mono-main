import { Request, Response } from 'express';
import { createClient } from '@supabase/supabase-js';

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
let supabaseClient: any = null;

const getSupabaseClient = () => {
  if (supabaseClient) {
    return supabaseClient;
  }

  const SUPABASE_URL = process.env.SUPABASE_URL;
  const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
  
  console.log('üìú –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase:');
  console.log('üìú SUPABASE_URL:', SUPABASE_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('üìú SUPABASE_SERVICE_KEY:', SUPABASE_SERVICE_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  
  if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
    console.warn('‚ö†Ô∏è Supabase credentials not configured for scripts');
    throw new Error('Supabase credentials not configured');
  }
  
  console.log('‚úÖ –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤');
  supabaseClient = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: { persistSession: false }
  });
  
  return supabaseClient;
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface Script {
  id: string;
  title: string;
  description: string;
  code: string;
  category: string;
  tags: string[];
  author_id?: string;
  author_name: string;
  version: string;
  status: 'draft' | 'published' | 'archived' | 'banned';
  is_featured: boolean;
  is_premium: boolean;
  downloads_count: number;
  rating: number;
  rating_count: number;
  file_size: number;
  file_type: string;
  compatibility: any;
  requirements: string[];
  changelog?: string;
  created_at: string;
  updated_at: string;
  published_at?: string;
  last_downloaded_at?: string;
}

interface CreateScriptRequest {
  title: string;
  description: string;
  code: string;
  category: string;
  tags: string[];
  author_name: string;
  is_featured?: boolean;
  is_premium?: boolean;
  file_type?: string;
  compatibility?: any;
  requirements?: string[];
  changelog?: string;
}

interface UpdateScriptRequest {
  title?: string;
  description?: string;
  code?: string;
  category?: string;
  tags?: string[];
  status?: 'draft' | 'published' | 'archived' | 'banned';
  is_featured?: boolean;
  is_premium?: boolean;
  file_type?: string;
  compatibility?: any;
  requirements?: string[];
  changelog?: string;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
export const getScripts = async (req: Request, res: Response) => {
  try {
    const { 
      page = 1, 
      limit = 20, 
      search = '', 
      category = '', 
      status = '', // –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      featured = '',
      premium = '',
      sort = 'created_at',
      order = 'desc'
    } = req.query;

    const supabase = getSupabaseClient();

    // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
    console.log('üìú –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏–∑ Supabase');
    const offset = (Number(page) - 1) * Number(limit);

    let query = supabase
      .from('scripts')
      .select('*')
      .order(sort as string, { ascending: order === 'asc' });

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      query = query.eq('status', status);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category) {
      query = query.eq('category', category);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ featured
    if (featured === 'true') {
      query = query.eq('is_featured', true);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ premium
    if (premium === 'true') {
      query = query.eq('is_premium', true);
    }

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
    if (search) {
      query = query.or(`title.ilike.%${search}%,description.ilike.%${search}%`);
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    query = query.range(offset, offset + Number(limit) - 1);

    const { data: scripts, error } = await query;

    if (error) {
      throw error;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const { count } = await supabase
      .from('scripts')
      .select('*', { count: 'exact', head: true });

    res.json({
      success: true,
      data: {
        scripts: scripts || [],
        pagination: {
          page: Number(page),
          limit: Number(limit),
          total: count || 0,
          pages: Math.ceil((count || 0) / Number(limit))
        }
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ ID
export const getScriptById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const supabase = getSupabaseClient();

    const { data: script, error } = await supabase
      .from('scripts')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      return res.status(404).json({
        success: false,
        error: '–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      data: script
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
export const createScript = async (req: Request, res: Response) => {
  try {
    console.log('üìú createScript –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', req.body);
    const scriptData: CreateScriptRequest = req.body;
    const supabase = getSupabaseClient();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!scriptData.title || !scriptData.code) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const newScript = {
      title: scriptData.title,
      description: scriptData.description || '',
      code: scriptData.code,
      category: scriptData.category || 'general',
      tags: scriptData.tags || [],
      author_name: scriptData.author_name || 'Admin',
      version: '1.0.0',
      status: 'draft' as const,
      is_featured: scriptData.is_featured || false,
      is_premium: scriptData.is_premium || false,
      file_type: scriptData.file_type || 'javascript',
      compatibility: scriptData.compatibility || {},
      requirements: scriptData.requirements || ['none'],
      changelog: scriptData.changelog || '',
      file_size: new Blob([scriptData.code]).size
    };

    const { data: script, error } = await supabase
      .from('scripts')
      .insert([newScript])
      .select()
      .single();

    if (error) {
      throw error;
    }

    res.status(201).json({
      success: true,
      data: script
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
export const updateScript = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const updateData: UpdateScriptRequest = req.body;
    const supabase = getSupabaseClient();

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ–¥, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if (updateData.code) {
      updateData.file_size = new Blob([updateData.code]).size;
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ published, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º published_at
    if (updateData.status === 'published') {
      updateData.published_at = new Date().toISOString();
    }

    const { data: script, error } = await supabase
      .from('scripts')
      .update(updateData)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      throw error;
    }

    res.json({
      success: true,
      data: script
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
export const deleteScript = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const supabase = getSupabaseClient();

    const { error } = await supabase
      .from('scripts')
      .delete()
      .eq('id', id);

    if (error) {
      throw error;
    }

    res.json({
      success: true,
      message: '–°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export const downloadScript = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const supabase = getSupabaseClient();

    console.log('üì• downloadScript –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞:', id);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    const { data: script, error: scriptError } = await supabase
      .from('scripts')
      .select('*')
      .eq('id', id)
      .eq('status', 'published')
      .single();

    if (scriptError || !script) {
      console.log('‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:', scriptError);
      return res.status(404).json({
        success: false,
        error: '–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'
      });
    }

    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω:', script.title);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É script_downloads
    // –¢—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç downloads_count –≤ —Ç–∞–±–ª–∏—Ü–µ scripts
    const { error: downloadError } = await supabase
      .from('script_downloads')
      .insert([{
        script_id: id,
        user_id: null // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
      }]);

    if (downloadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–≥—Ä—É–∑–∫–∏:', downloadError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    } else {
      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }

    res.json({
      success: true,
      data: {
        id: script.id,
        title: script.title,
        code: script.code,
        file_type: script.file_type,
        version: script.version,
        author_name: script.author_name
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–∫—Ä–∏–ø—Ç–∞
export const rateScript = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { rating, review } = req.body;
    const supabase = getSupabaseClient();

    console.log('‚≠ê rateScript –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞:', id, '–æ—Ü–µ–Ω–∫–∞:', rating);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({
        success: false,
        error: '–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
    const { data: script, error: scriptError } = await supabase
      .from('scripts')
      .select('id, title')
      .eq('id', id)
      .eq('status', 'published')
      .single();

    if (scriptError || !script) {
      return res.status(404).json({
        success: false,
        error: '–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const userId = req.user?.id || null;
    
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user ? `${req.user.email} (${req.user.id})` : '–ê–Ω–æ–Ω–∏–º–Ω—ã–π');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ü–µ–Ω–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let existingRating = null;
    if (userId) {
      // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id
      const { data } = await supabase
        .from('script_ratings')
        .select('id')
        .eq('script_id', id)
        .eq('user_id', userId)
        .single();
      existingRating = data;
    } else {
      // –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ script_id –∏ NULL user_id
      const { data } = await supabase
        .from('script_ratings')
        .select('id')
        .eq('script_id', id)
        .is('user_id', null)
        .single();
      existingRating = data;
    }

    let result;
    if (existingRating) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É
      const { data, error } = await supabase
        .from('script_ratings')
        .update({
          rating,
          review: review || null,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingRating.id)
        .select()
        .single();

      if (error) throw error;
      result = data;
      console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
      const insertData: any = {
        script_id: id,
        rating,
        review: review || null
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º user_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ null
      if (userId) {
        insertData.user_id = userId;
      }
      
      const { data, error } = await supabase
        .from('script_ratings')
        .insert([insertData])
        .select()
        .single();

      if (error) throw error;
      result = data;
      console.log('‚úÖ –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
export const getScriptRatings = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const supabase = getSupabaseClient();

    console.log('üìä getScriptRatings –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞:', id);

    const { data: ratings, error } = await supabase
      .from('script_ratings')
      .select(`
        id,
        rating,
        review,
        created_at,
        updated_at,
        user_id
      `)
      .eq('script_id', id)
      .order('created_at', { ascending: false });

    if (error) throw error;

    res.json({
      success: true,
      data: ratings || []
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫'
    });
  }
};

// –£–¥–∞–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–∫—Ä–∏–ø—Ç–∞
export const deleteScriptRating = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const supabase = getSupabaseClient();

    console.log('üóëÔ∏è deleteScriptRating –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞:', id);

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const userId = req.user?.id;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
      });
    }

    const { error } = await supabase
      .from('script_ratings')
      .delete()
      .eq('script_id', id)
      .eq('user_id', userId);

    if (error) throw error;

    console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞');

    res.json({
      success: true,
      message: '–û—Ü–µ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
export const getScriptStats = async (req: Request, res: Response) => {
  try {
    const supabase = getSupabaseClient();

    // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
    const [
      { count: totalScripts },
      { count: publishedScripts },
      { count: draftScripts },
      { data: downloadsData },
      { data: ratingsData },
      { data: categoriesData }
    ] = await Promise.all([
      supabase.from('scripts').select('*', { count: 'exact', head: true }),
      supabase.from('scripts').select('*', { count: 'exact', head: true }).eq('status', 'published'),
      supabase.from('scripts').select('*', { count: 'exact', head: true }).eq('status', 'draft'),
      supabase.from('script_downloads').select('*'),
      supabase.from('script_ratings').select('rating'),
      supabase.from('scripts').select('category').eq('status', 'published')
    ]);

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalDownloads = downloadsData?.length || 0;
    const totalRatings = ratingsData?.length || 0;
    const averageRating = ratingsData?.length > 0 
      ? ratingsData.reduce((sum, r) => sum + r.rating, 0) / ratingsData.length 
      : 0;

    // –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryCount: { [key: string]: number } = {};
    categoriesData?.forEach(item => {
      categoryCount[item.category] = (categoryCount[item.category] || 0) + 1;
    });
    const topCategories = Object.entries(categoryCount)
      .map(([category, count]) => ({ category, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    res.json({
      success: true,
      data: {
        totalScripts: totalScripts || 0,
        publishedScripts: publishedScripts || 0,
        draftScripts: draftScripts || 0,
        totalDownloads,
        totalRatings,
        averageRating: Math.round(averageRating * 100) / 100,
        topCategories
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤'
    });
  }
};

// Extension Sync Functions

// –ü–æ–ª—É—á–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserInstalledScripts = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).user?.id;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: 'Unauthorized'
      });
    }

    const supabase = getSupabaseClient();

    // –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: installedScripts, error } = await supabase
      .from('user_scripts')
      .select(`
        script_id,
        installed_at,
        scripts (
          id,
          title,
          description,
          code,
          version,
          author_name,
          category,
          tags,
          updated_at
        )
      `)
      .eq('user_id', userId);

    if (error) throw error;

    res.json({
      success: true,
      data: installedScripts?.map((item: any) => ({
        script_id: item.script_id,
        installed_at: item.installed_at,
        script: item.scripts
      })) || []
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤'
    });
  }
};

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ lk.ebuster.ru)
export const installScriptForUser = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).user?.id;
    const { id: scriptId } = req.params;
    
    console.log('üì• [installScriptForUser] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', { userId, scriptId });
    
    if (!userId) {
      console.log('‚ùå [installScriptForUser] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return res.status(401).json({
        success: false,
        error: 'Unauthorized'
      });
    }

    const supabase = getSupabaseClient();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∫—Ä–∏–ø—Ç
    const { data: script, error: scriptError } = await supabase
      .from('scripts')
      .select('*')
      .eq('id', scriptId)
      .single();

    if (scriptError || !script) {
      return res.status(404).json({
        success: false,
        error: '–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
    console.log('üíæ [installScriptForUser] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_scripts...');
    const { error: installError } = await supabase
      .from('user_scripts')
      .upsert({
        user_id: userId,
        script_id: scriptId,
        installed_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,script_id'
      });

    if (installError) {
      console.error('‚ùå [installScriptForUser] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', installError);
      throw installError;
    }
    
    console.log('‚úÖ [installScriptForUser] –°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫
    await supabase.rpc('increment_downloads', { script_id: scriptId });

    res.json({
      success: true,
      message: '–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      script
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –£–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const uninstallScriptForUser = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).user?.id;
    const { id: scriptId } = req.params;
    
    console.log('üóëÔ∏è [uninstallScriptForUser] –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞:', { userId, scriptId });
    
    if (!userId) {
      console.log('‚ùå [uninstallScriptForUser] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return res.status(401).json({
        success: false,
        error: 'Unauthorized'
      });
    }

    const supabase = getSupabaseClient();

    const { error } = await supabase
      .from('user_scripts')
      .delete()
      .eq('user_id', userId)
      .eq('script_id', scriptId);

    if (error) {
      console.error('‚ùå [uninstallScriptForUser] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      throw error;
    }
    
    console.log('‚úÖ [uninstallScriptForUser] –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î');

    res.json({
      success: true,
      message: '–°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
export const syncUserScripts = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).user?.id;
    const { scriptIds } = req.body; // –ú–∞—Å—Å–∏–≤ ID —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: 'Unauthorized'
      });
    }

    if (!Array.isArray(scriptIds)) {
      return res.status(400).json({
        success: false,
        error: 'scriptIds –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
      });
    }

    const supabase = getSupabaseClient();

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    await supabase
      .from('user_scripts')
      .delete()
      .eq('user_id', userId);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    if (scriptIds.length > 0) {
      const records = scriptIds.map(scriptId => ({
        user_id: userId,
        script_id: scriptId,
        installed_at: new Date().toISOString()
      }));

      const { error } = await supabase
        .from('user_scripts')
        .insert(records);

      if (error) throw error;
    }

    res.json({
      success: true,
      message: '–°–∫—Ä–∏–ø—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤'
    });
  }
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
export const checkScriptUpdates = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).user?.id;
    const { scripts } = req.query; // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {id, version}
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: 'Unauthorized'
      });
    }

    const installedScripts = JSON.parse(scripts as string || '[]');
    const supabase = getSupabaseClient();

    const updates = [];

    for (const installed of installedScripts) {
      const { data: script } = await supabase
        .from('scripts')
        .select('id, version, updated_at')
        .eq('id', installed.id)
        .single();

      if (script && script.version !== installed.version) {
        updates.push({
          id: script.id,
          oldVersion: installed.version,
          newVersion: script.version,
          updated_at: script.updated_at
        });
      }
    }

    res.json({
      success: true,
      updates
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'
    });
  }
};
