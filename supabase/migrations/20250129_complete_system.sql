-- –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–∏–∫–µ—Ç—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—ã

-- 1. –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–∫—Ä–∏–ø—Ç–æ–≤
CREATE TABLE IF NOT EXISTS public.script_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE,
    slug VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    icon VARCHAR(50),
    color VARCHAR(20),
    display_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CREATE INDEX IF NOT EXISTS idx_categories_slug ON public.script_categories(slug);
CREATE INDEX IF NOT EXISTS idx_categories_active ON public.script_categories(is_active);

-- –í—Å—Ç–∞–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
INSERT INTO public.script_categories (name, slug, description, icon, color, display_order) VALUES
('UI', 'ui', '–£–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', 'üé®', '#3b82f6', 1),
('Privacy', 'privacy', '–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'üîí', '#8b5cf6', 2),
('Productivity', 'productivity', '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '‚ö°', '#10b981', 3),
('General', 'general', '–û–±—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã', 'üì¶', '#6b7280', 4)
ON CONFLICT (slug) DO NOTHING;

-- 2. –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
CREATE TABLE IF NOT EXISTS public.support_tickets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES public.auth_users(id) ON DELETE CASCADE,
    subject VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    category VARCHAR(50) DEFAULT 'general',
    priority VARCHAR(20) DEFAULT 'medium',
    status VARCHAR(20) DEFAULT 'new',
    assigned_to UUID REFERENCES public.auth_users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    closed_at TIMESTAMP WITH TIME ZONE
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
CREATE INDEX IF NOT EXISTS idx_tickets_user ON public.support_tickets(user_id);
CREATE INDEX IF NOT EXISTS idx_tickets_status ON public.support_tickets(status);
CREATE INDEX IF NOT EXISTS idx_tickets_assigned ON public.support_tickets(assigned_to);
CREATE INDEX IF NOT EXISTS idx_tickets_created ON public.support_tickets(created_at DESC);

-- 3. –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ —Ç–∏–∫–µ—Ç–∞–º
CREATE TABLE IF NOT EXISTS public.ticket_messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ticket_id UUID NOT NULL REFERENCES public.support_tickets(id) ON DELETE CASCADE,
    author_id UUID NOT NULL REFERENCES public.auth_users(id) ON DELETE CASCADE,
    message TEXT NOT NULL,
    is_internal BOOLEAN DEFAULT false,
    is_system BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
CREATE INDEX IF NOT EXISTS idx_messages_ticket ON public.ticket_messages(ticket_id);
CREATE INDEX IF NOT EXISTS idx_messages_created ON public.ticket_messages(created_at);
CREATE INDEX IF NOT EXISTS idx_messages_author ON public.ticket_messages(author_id);

-- 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ auth_users (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'auth_users' AND column_name = 'referral_code') THEN
        ALTER TABLE public.auth_users ADD COLUMN referral_code VARCHAR(20) UNIQUE;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'auth_users' AND column_name = 'referred_by') THEN
        ALTER TABLE public.auth_users ADD COLUMN referred_by UUID REFERENCES public.auth_users(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'auth_users' AND column_name = 'referral_earnings') THEN
        ALTER TABLE public.auth_users ADD COLUMN referral_earnings INTEGER DEFAULT 0;
    END IF;
END $$;

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
CREATE INDEX IF NOT EXISTS idx_users_referral_code ON public.auth_users(referral_code);
CREATE INDEX IF NOT EXISTS idx_users_referred_by ON public.auth_users(referred_by);

-- 5. –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
CREATE TABLE IF NOT EXISTS public.referral_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    referrer_id UUID NOT NULL REFERENCES public.auth_users(id) ON DELETE CASCADE,
    referred_id UUID NOT NULL REFERENCES public.auth_users(id) ON DELETE CASCADE,
    reward_amount INTEGER DEFAULT 0,
    reward_type VARCHAR(50) DEFAULT 'bonus',
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    processed_at TIMESTAMP WITH TIME ZONE
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
CREATE INDEX IF NOT EXISTS idx_referral_history_referrer ON public.referral_history(referrer_id);
CREATE INDEX IF NOT EXISTS idx_referral_history_referred ON public.referral_history(referred_id);
CREATE INDEX IF NOT EXISTS idx_referral_history_status ON public.referral_history(status);

-- 6. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
CREATE OR REPLACE FUNCTION generate_referral_code()
RETURNS TEXT AS $$
DECLARE
    code TEXT;
    exists BOOLEAN;
BEGIN
    LOOP
        -- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥
        code := upper(substring(md5(random()::text) from 1 for 8));
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        SELECT EXISTS(SELECT 1 FROM public.auth_users WHERE referral_code = code) INTO exists;
        
        EXIT WHEN NOT exists;
    END LOOP;
    
    RETURN code;
END;
$$ LANGUAGE plpgsql;

-- 7. –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE OR REPLACE FUNCTION auto_generate_referral_code()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.referral_code IS NULL THEN
        NEW.referral_code := generate_referral_code();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_generate_referral_code ON public.auth_users;
CREATE TRIGGER trigger_generate_referral_code
    BEFORE INSERT ON public.auth_users
    FOR EACH ROW
    EXECUTE FUNCTION auto_generate_referral_code();

-- 8. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
CREATE OR REPLACE FUNCTION process_referral(
    new_user_id UUID,
    referral_code_used TEXT
)
RETURNS BOOLEAN AS $$
DECLARE
    referrer_id UUID;
    reward_amount INTEGER := 100; -- –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
BEGIN
    -- –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
    SELECT id INTO referrer_id
    FROM public.auth_users
    WHERE referral_code = referral_code_used;
    
    IF referrer_id IS NULL THEN
        RETURN FALSE;
    END IF;
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º referred_by —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UPDATE public.auth_users
    SET referred_by = referrer_id
    WHERE id = new_user_id;
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    INSERT INTO public.referral_history (referrer_id, referred_id, reward_amount, status)
    VALUES (referrer_id, new_user_id, reward_amount, 'completed');
    
    -- –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    UPDATE public.auth_users
    SET referral_earnings = COALESCE(referral_earnings, 0) + reward_amount
    WHERE id = referrer_id;
    
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

-- 9. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
UPDATE public.auth_users
SET referral_code = generate_referral_code()
WHERE referral_code IS NULL;

-- 10. Row Level Security (RLS) –ø–æ–ª–∏—Ç–∏–∫–∏
ALTER TABLE public.script_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ticket_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.referral_history ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å)
CREATE POLICY "Categories are viewable by everyone" ON public.script_categories
    FOR SELECT USING (true);

CREATE POLICY "Categories are editable by admins" ON public.script_categories
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.auth_users
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏, –∞–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ)
CREATE POLICY "Users can view own tickets" ON public.support_tickets
    FOR SELECT USING (
        user_id = auth.uid() OR
        EXISTS (
            SELECT 1 FROM public.auth_users
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Users can create tickets" ON public.support_tickets
    FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Admins can update tickets" ON public.support_tickets
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM public.auth_users
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
CREATE POLICY "Users can view messages on their tickets" ON public.ticket_messages
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.support_tickets
            WHERE id = ticket_id AND (
                user_id = auth.uid() OR
                EXISTS (
                    SELECT 1 FROM public.auth_users
                    WHERE id = auth.uid() AND role = 'admin'
                )
            )
        )
    );

CREATE POLICY "Users can create messages" ON public.ticket_messages
    FOR INSERT WITH CHECK (author_id = auth.uid());

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
CREATE POLICY "Users can view own referral history" ON public.referral_history
    FOR SELECT USING (
        referrer_id = auth.uid() OR
        EXISTS (
            SELECT 1 FROM public.auth_users
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

COMMENT ON TABLE public.script_categories IS '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏';
COMMENT ON TABLE public.support_tickets IS '–¢–∏–∫–µ—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏';
COMMENT ON TABLE public.ticket_messages IS '–°–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–∏–∫–µ—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏';
COMMENT ON TABLE public.referral_history IS '–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π';
